// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    expert   Expert?
    business Business?
    sessions Session[]
}

model Session {
    id        String   @id @default(cuid())
    userId    String
    token     String   @unique
    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expert {
    id                  String   @id @default(cuid())
    userId              String   @unique
    name                String
    profilePicture      String?
    professionalTitle   String
    yearsOfExperience   Int
    areasOfExpertise    String[]
    certifications      String[]
    hourlyRateMin       Float
    hourlyRateMax       Float?
    location            String
    isRemote            Boolean  @default(false)
    availability        Json?
    bio                 String   @db.Text
    professionalSummary String   @db.Text
    linkedinUrl         String?
    websiteUrl          String?
    languages           String[]
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CompanySize {
    SMALL
    MEDIUM
    LARGE
}

model Business {
    id             String      @id @default(cuid())
    userId         String      @unique
    companyName    String
    description    String      @db.Text
    industryType   String
    companySize    CompanySize
    location       String
    servicesNeeded String[]
    budgetMin      Float
    budgetMax      Float
    timeline       String
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
